use std::{env, fs};
const MOV_BYTES: usize = 6;
const FULL_INSTRUCTION: usize = 16;

fn get_bits(contents: &[u8]) -> Vec<u8> {
    let mut bits: Vec<u8> = Vec::with_capacity(contents.len() * 8);

    for byte in contents {
        for i in (0..8).rev() {
            let bit = (byte >> i) & 1;
            bits.push(bit);
        }
    }
    return bits;
}

const MOV: usize = 0;
const D: usize = 6;
const W: usize = 7;
const REG_1: usize = 10;
const REG_2: usize = 11;
const REG_3: usize = 12;
const RM_1: usize = 13;
const RM_2: usize = 14;
const RM_3: usize = 15;

fn main() {
    let args: Vec<String> = env::args().collect();
    let binary_path = &args[1];
    let binary_contents = fs::read(binary_path).unwrap();
    let instructions = binary_contents.chunks(2);

    let mut asm: String = String::new();

    let bit_mask: u8 = 0b0000_0000_0000_0000;

    let mut SRC_REG: &str;
    let mut DST_REG: &str;

    for inst in instructions {
        for byte in inst {
            let res = *byte & bit_mask;

            match res {}
        }
        //        let bits = get_bits(&inst);
        println!("{:?}", inst);
    }
}
//           DW_MOD_REG_R/M
// 0b_100010_00_00_000_000 mask

// ALL THE POSSIBLE INSTRUCTIONS

////////////////////////////////
// 0b_100010_00_11_000_000
// 0b_100010_00_11_000_001
// 0b_100010_00_11_000_010
// 0b_100010_00_11_000_011
// 0b_100010_00_11_000_100
// 0b_100010_00_11_000_101
// 0b_100010_00_11_000_110
// 0b_100010_00_11_000_111

// 0b_100010_00_11_001_000
// 0b_100010_00_11_001_001
// 0b_100010_00_11_001_010
// 0b_100010_00_11_001_011
// 0b_100010_00_11_001_100
// 0b_100010_00_11_001_101
// 0b_100010_00_11_001_110
// 0b_100010_00_11_001_111

// 0b_100010_00_11_010_000
// 0b_100010_00_11_010_001
// 0b_100010_00_11_010_010
// 0b_100010_00_11_010_011
// 0b_100010_00_11_010_100
// 0b_100010_00_11_010_101
// 0b_100010_00_11_010_110
// 0b_100010_00_11_010_111

// 0b_100010_00_11_011_000
// 0b_100010_00_11_011_001
// 0b_100010_00_11_011_010
// 0b_100010_00_11_011_011
// 0b_100010_00_11_011_100
// 0b_100010_00_11_011_101
// 0b_100010_00_11_011_110
// 0b_100010_00_11_011_111

// 0b_100010_00_11_100_000
// 0b_100010_00_11_100_001
// 0b_100010_00_11_100_010
// 0b_100010_00_11_100_011
// 0b_100010_00_11_100_100
// 0b_100010_00_11_100_101
// 0b_100010_00_11_100_110
// 0b_100010_00_11_100_111

// 0b_100010_00_11_101_000
// 0b_100010_00_11_101_001
// 0b_100010_00_11_101_010
// 0b_100010_00_11_101_011
// 0b_100010_00_11_101_100
// 0b_100010_00_11_101_101
// 0b_100010_00_11_101_110
// 0b_100010_00_11_101_111

// 0b_100010_00_11_110_000
// 0b_100010_00_11_110_001
// 0b_100010_00_11_110_010
// 0b_100010_00_11_110_011
// 0b_100010_00_11_110_100
// 0b_100010_00_11_110_101
// 0b_100010_00_11_110_110
// 0b_100010_00_11_110_111

// 0b_100010_00_11_111_000
// 0b_100010_00_11_111_001
// 0b_100010_00_11_111_010
// 0b_100010_00_11_111_011
// 0b_100010_00_11_111_100
// 0b_100010_00_11_111_101
// 0b_100010_00_11_111_110
// 0b_100010_00_11_111_111

// 0b_100010_00_11_000_000
// 0b_100010_00_11_000_001
// 0b_100010_00_11_000_010
// 0b_100010_00_11_000_011
// 0b_100010_00_11_000_100
// 0b_100010_00_11_000_101
// 0b_100010_00_11_000_110
// 0b_100010_00_11_000_111

////////////////////////////////
// 0b_100010_11_11_000_000
// 0b_100010_11_11_000_001
// 0b_100010_11_11_000_010
// 0b_100010_11_11_000_011
// 0b_100010_11_11_000_100
// 0b_100010_11_11_000_101
// 0b_100010_11_11_000_110
// 0b_100010_11_11_000_111

// 0b_100010_11_11_001_000
// 0b_100010_11_11_001_001
// 0b_100010_11_11_001_010
// 0b_100010_11_11_001_011
// 0b_100010_11_11_001_100
// 0b_100010_11_11_001_101
// 0b_100010_11_11_001_110
// 0b_100010_11_11_001_111

// 0b_100010_11_11_010_000
// 0b_100010_11_11_010_001
// 0b_100010_11_11_010_010
// 0b_100010_11_11_010_011
// 0b_100010_11_11_010_100
// 0b_100010_11_11_010_101
// 0b_100010_11_11_010_110
// 0b_100010_11_11_010_111

// 0b_100010_11_11_011_000
// 0b_100010_11_11_011_001
// 0b_100010_11_11_011_010
// 0b_100010_11_11_011_011
// 0b_100010_11_11_011_100
// 0b_100010_11_11_011_101
// 0b_100010_11_11_011_110
// 0b_100010_11_11_011_111

// 0b_100010_11_11_100_000
// 0b_100010_11_11_100_001
// 0b_100010_11_11_100_010
// 0b_100010_11_11_100_011
// 0b_100010_11_11_100_100
// 0b_100010_11_11_100_101
// 0b_100010_11_11_100_110
// 0b_100010_11_11_100_111

// 0b_100010_11_11_101_000
// 0b_100010_11_11_101_001
// 0b_100010_11_11_101_010
// 0b_100010_11_11_101_011
// 0b_100010_11_11_101_100
// 0b_100010_11_11_101_101
// 0b_100010_11_11_101_110
// 0b_100010_11_11_101_111

// 0b_100010_11_11_110_000
// 0b_100010_11_11_110_001
// 0b_100010_11_11_110_010
// 0b_100010_11_11_110_011
// 0b_100010_11_11_110_100
// 0b_100010_11_11_110_101
// 0b_100010_11_11_110_110
// 0b_100010_11_11_110_111

// 0b_100010_11_11_111_000
// 0b_100010_11_11_111_001
// 0b_100010_11_11_111_010
// 0b_100010_11_11_111_011
// 0b_100010_11_11_111_100
// 0b_100010_11_11_111_101
// 0b_100010_11_11_111_110
// 0b_100010_11_11_111_111

// 0b_100010_11_11_000_000
// 0b_100010_11_11_000_001
// 0b_100010_11_11_000_010
// 0b_100010_11_11_000_011
// 0b_100010_11_11_000_100
// 0b_100010_11_11_000_101
// 0b_100010_11_11_000_110
// 0b_100010_11_11_000_111

// 0b_100010_11_11_001_000
// 0b_100010_11_11_001_001
// 0b_100010_11_11_001_010
// 0b_100010_11_11_001_011
// 0b_100010_11_11_001_100
// 0b_100010_11_11_001_101
// 0b_100010_11_11_001_110
// 0b_100010_11_11_001_111

// 0b_100010_11_11_010_000
// 0b_100010_11_11_010_001
// 0b_100010_11_11_010_010
// 0b_100010_11_11_010_011
// 0b_100010_11_11_010_100
// 0b_100010_11_11_010_101
// 0b_100010_11_11_010_110
// 0b_100010_11_11_010_111

// 0b_100010_11_11_011_000
// 0b_100010_11_11_011_001
// 0b_100010_11_11_011_010
// 0b_100010_11_11_011_011
// 0b_100010_11_11_011_100
// 0b_100010_11_11_011_101
// 0b_100010_11_11_011_110
// 0b_100010_11_11_011_111

// 0b_100010_11_11_100_000
// 0b_100010_11_11_100_001
// 0b_100010_11_11_100_010
// 0b_100010_11_11_100_011
// 0b_100010_11_11_100_100
// 0b_100010_11_11_100_101
// 0b_100010_11_11_100_110
// 0b_100010_11_11_100_111

// 0b_100010_11_11_101_000
// 0b_100010_11_11_101_001
// 0b_100010_11_11_101_010
// 0b_100010_11_11_101_011
// 0b_100010_11_11_101_100
// 0b_100010_11_11_101_101
// 0b_100010_11_11_101_110
// 0b_100010_11_11_101_111

// 0b_100010_11_11_110_000
// 0b_100010_11_11_110_001
// 0b_100010_11_11_110_010
// 0b_100010_11_11_110_011
// 0b_100010_11_11_110_100
// 0b_100010_11_11_110_101
// 0b_100010_11_11_110_110
// 0b_100010_11_11_110_111

// 0b_100010_11_11_111_000
// 0b_100010_11_11_111_001
// 0b_100010_11_11_111_010
// 0b_100010_11_11_111_011
// 0b_100010_11_11_111_100
// 0b_100010_11_11_111_101
// 0b_100010_11_11_111_110
// 0b_100010_11_11_111_111

// 0b_100010_11_11_000_000
// 0b_100010_11_11_000_001
// 0b_100010_11_11_000_010
// 0b_100010_11_11_000_011
// 0b_100010_11_11_000_100
// 0b_100010_11_11_000_101
// 0b_100010_11_11_000_110
// 0b_100010_11_11_000_111

// 0b_100010_11_11_001_000
// 0b_100010_11_11_001_001
// 0b_100010_11_11_001_010
// 0b_100010_11_11_001_011
// 0b_100010_11_11_001_100
// 0b_100010_11_11_001_101
// 0b_100010_11_11_001_110
// 0b_100010_11_11_001_111

// 0b_100010_11_11_010_000
// 0b_100010_11_11_010_001
// 0b_100010_11_11_010_010
// 0b_100010_11_11_010_011
// 0b_100010_11_11_010_100
// 0b_100010_11_11_010_101
// 0b_100010_11_11_010_110
// 0b_100010_11_11_010_111

////////////////////////////////
// 0b_100010_01_11_010_000
// 0b_100010_01_11_010_001
// 0b_100010_01_11_010_010
// 0b_100010_01_11_010_011
// 0b_100010_01_11_010_100
// 0b_100010_01_11_010_101
// 0b_100010_01_11_010_110
// 0b_100010_01_11_010_111

// 0b_100010_01_11_011_000
// 0b_100010_01_11_011_001
// 0b_100010_01_11_011_010
// 0b_100010_01_11_011_011
// 0b_100010_01_11_011_100
// 0b_100010_01_11_011_101
// 0b_100010_01_11_011_110
// 0b_100010_01_11_011_111

// 0b_100010_01_11_100_000
// 0b_100010_01_11_100_001
// 0b_100010_01_11_100_010
// 0b_100010_01_11_100_011
// 0b_100010_01_11_100_100
// 0b_100010_01_11_100_101
// 0b_100010_01_11_100_110
// 0b_100010_01_11_100_111

// 0b_100010_01_11_101_000
// 0b_100010_01_11_101_001
// 0b_100010_01_11_101_010
// 0b_100010_01_11_101_011
// 0b_100010_01_11_101_100
// 0b_100010_01_11_101_101
// 0b_100010_01_11_101_110
// 0b_100010_01_11_101_111

// 0b_100010_01_11_110_000
// 0b_100010_01_11_110_001
// 0b_100010_01_11_110_010
// 0b_100010_01_11_110_011
// 0b_100010_01_11_110_100
// 0b_100010_01_11_110_101
// 0b_100010_01_11_110_110
// 0b_100010_01_11_110_111

// 0b_100010_01_11_111_000
// 0b_100010_01_11_111_001
// 0b_100010_01_11_111_010
// 0b_100010_01_11_111_011
// 0b_100010_01_11_111_100
// 0b_100010_01_11_111_101
// 0b_100010_01_11_111_110
// 0b_100010_01_11_111_111

////////////////////////////////
// 0b_100010_10_11_010_000
// 0b_100010_10_11_010_001
// 0b_100010_10_11_010_010
// 0b_100010_10_11_010_011
// 0b_100010_10_11_010_100
// 0b_100010_10_11_010_101
// 0b_100010_10_11_010_110
// 0b_100010_10_11_010_111

// 0b_100010_10_11_011_000
// 0b_100010_10_11_011_001
// 0b_100010_10_11_011_010
// 0b_100010_10_11_011_011
// 0b_100010_10_11_011_100
// 0b_100010_10_11_011_101
// 0b_100010_10_11_011_110
// 0b_100010_10_11_011_111

// 0b_100010_10_11_100_000
// 0b_100010_10_11_100_001
// 0b_100010_10_11_100_010
// 0b_100010_10_11_100_011
// 0b_100010_10_11_100_100
// 0b_100010_10_11_100_101
// 0b_100010_10_11_100_110
// 0b_100010_10_11_100_111

// 0b_100010_10_11_101_000
// 0b_100010_10_11_101_001
// 0b_100010_10_11_101_010
// 0b_100010_10_11_101_011
// 0b_100010_10_11_101_100
// 0b_100010_10_11_101_101
// 0b_100010_10_11_101_110
// 0b_100010_10_11_101_111

// 0b_100010_10_11_110_000
// 0b_100010_10_11_110_001
// 0b_100010_10_11_110_010
// 0b_100010_10_11_110_011
// 0b_100010_10_11_110_100
// 0b_100010_10_11_110_101
// 0b_100010_10_11_110_110
// 0b_100010_10_11_110_111

// 0b_100010_10_11_111_000
// 0b_100010_10_11_111_001
// 0b_100010_10_11_111_010
// 0b_100010_10_11_111_011
// 0b_100010_10_11_111_100
// 0b_100010_10_11_111_101
// 0b_100010_10_11_111_110
// 0b_100010_10_11_111_111
// D = 0 = Instruction source is specified in the REG field
// W = 0 = Instruction operate on byte data
