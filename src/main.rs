use core::panic;
use std::{env, fs};

fn get_instruction(byte: u16) -> &'static str {
    return match byte & 0b100010_11_11_111_111 {
        0b_100010_00_11_000_000 => "mov al, al\n",
        0b_100010_00_11_000_001 => "mov cl, al\n",
        0b_100010_00_11_000_010 => "mov dl, al\n",
        0b_100010_00_11_000_011 => "mov bl, al\n",
        0b_100010_00_11_000_100 => "mov ah, al\n",
        0b_100010_00_11_000_101 => "mov ch, al\n",
        0b_100010_00_11_000_110 => "mov dh, al\n",
        0b_100010_00_11_000_111 => "mov bh, al\n",
        //
        0b_100010_00_11_001_000 => "mov al, cl\n",
        0b_100010_00_11_001_001 => "mov cl, cl\n",
        0b_100010_00_11_001_010 => "mov dl, cl\n",
        0b_100010_00_11_001_011 => "mov bl, cl\n",
        0b_100010_00_11_001_100 => "mov ah, cl\n",
        0b_100010_00_11_001_101 => "mov ch, cl\n",
        0b_100010_00_11_001_110 => "mov dh, cl\n",
        0b_100010_00_11_001_111 => "mov bh, cl\n",
        //
        0b_100010_00_11_010_000 => "mov al, dl\n",
        0b_100010_00_11_010_001 => "mov cl, dl\n",
        0b_100010_00_11_010_010 => "mov dl, dl\n",
        0b_100010_00_11_010_011 => "mov bl, dl\n",
        0b_100010_00_11_010_100 => "mov ah, dl\n",
        0b_100010_00_11_010_101 => "mov ch, dl\n",
        0b_100010_00_11_010_110 => "mov dh, dl\n",
        0b_100010_00_11_010_111 => "mov bh, dl\n",
        //
        0b_100010_00_11_011_000 => "mov al, bl\n",
        0b_100010_00_11_011_001 => "mov cl, bl\n",
        0b_100010_00_11_011_010 => "mov dl, bl\n",
        0b_100010_00_11_011_011 => "mov bl, bl\n",
        0b_100010_00_11_011_100 => "mov ah, bl\n",
        0b_100010_00_11_011_101 => "mov ch, bl\n",
        0b_100010_00_11_011_110 => "mov dh, bl\n",
        0b_100010_00_11_011_111 => "mov bh, bl\n",
        //
        0b_100010_00_11_100_000 => "mov al, ah\n",
        0b_100010_00_11_100_001 => "mov cl, ah\n",
        0b_100010_00_11_100_010 => "mov dl, ah\n",
        0b_100010_00_11_100_011 => "mov bl, ah\n",
        0b_100010_00_11_100_100 => "mov ah, ah\n",
        0b_100010_00_11_100_101 => "mov ch, ah\n",
        0b_100010_00_11_100_110 => "mov dh, ah\n",
        0b_100010_00_11_100_111 => "mov bh, ah\n",
        //
        0b_100010_00_11_101_000 => "mov al, ch\n",
        0b_100010_00_11_101_001 => "mov cl, ch\n",
        0b_100010_00_11_101_010 => "mov dl, ch\n",
        0b_100010_00_11_101_011 => "mov bl, ch\n",
        0b_100010_00_11_101_100 => "mov ah, ch\n",
        0b_100010_00_11_101_101 => "mov ch, ch\n",
        0b_100010_00_11_101_110 => "mov dh, ch\n",
        0b_100010_00_11_101_111 => "mov bh, ch\n",
        //
        0b_100010_00_11_110_000 => "mov al, dh\n",
        0b_100010_00_11_110_001 => "mov cl, dh\n",
        0b_100010_00_11_110_010 => "mov dl, dh\n",
        0b_100010_00_11_110_011 => "mov bl, dh\n",
        0b_100010_00_11_110_100 => "mov ah, dh\n",
        0b_100010_00_11_110_101 => "mov ch, dh\n",
        0b_100010_00_11_110_110 => "mov dh, dh\n",
        0b_100010_00_11_110_111 => "mov bh, dh\n",
        //
        0b_100010_00_11_111_000 => "mov al, bh\n",
        0b_100010_00_11_111_001 => "mov cl, bh\n",
        0b_100010_00_11_111_010 => "mov dl, bh\n",
        0b_100010_00_11_111_011 => "mov bl, bh\n",
        0b_100010_00_11_111_100 => "mov ah, bh\n",
        0b_100010_00_11_111_101 => "mov ch, bh\n",
        0b_100010_00_11_111_110 => "mov dh, bh\n",
        0b_100010_00_11_111_111 => "mov bh, bh\n",
        //
        0b_100010_11_11_000_000 => "mov ax, ax\n",
        0b_100010_11_11_000_001 => "mov ax, cx\n",
        0b_100010_11_11_000_010 => "mov ax, dx\n",
        0b_100010_11_11_000_011 => "mov ax, bx\n",
        0b_100010_11_11_000_100 => "mov ax, sp\n",
        0b_100010_11_11_000_101 => "mov ax, bp\n",
        0b_100010_11_11_000_110 => "mov ax, si\n",
        0b_100010_11_11_000_111 => "mov ax, di\n",
        //
        0b_100010_11_11_001_000 => "mov cx, ax\n",
        0b_100010_11_11_001_001 => "mov cx, cx\n",
        0b_100010_11_11_001_010 => "mov cx, dx\n",
        0b_100010_11_11_001_011 => "mov cx, bx\n",
        0b_100010_11_11_001_100 => "mov cx, sp\n",
        0b_100010_11_11_001_101 => "mov cx, bp\n",
        0b_100010_11_11_001_110 => "mov cx, si\n",
        0b_100010_11_11_001_111 => "mov cx, di\n",
        //
        0b_100010_11_11_010_000 => "mov dx, ax\n",
        0b_100010_11_11_010_001 => "mov dx, cx\n",
        0b_100010_11_11_010_010 => "mov dx, dx\n",
        0b_100010_11_11_010_011 => "mov dx, bx\n",
        0b_100010_11_11_010_100 => "mov dx, sp\n",
        0b_100010_11_11_010_101 => "mov dx, bp\n",
        0b_100010_11_11_010_110 => "mov dx, si\n",
        0b_100010_11_11_010_111 => "mov dx, di\n",
        //
        0b_100010_11_11_011_000 => "mov bx, ax\n",
        0b_100010_11_11_011_001 => "mov bx, cx\n",
        0b_100010_11_11_011_010 => "mov bx, dx\n",
        0b_100010_11_11_011_011 => "mov bx, bx\n",
        0b_100010_11_11_011_100 => "mov bx, sp\n",
        0b_100010_11_11_011_101 => "mov bx, bp\n",
        0b_100010_11_11_011_110 => "mov bx, si\n",
        0b_100010_11_11_011_111 => "mov bx, di\n",
        //
        0b_100010_11_11_100_000 => "mov sp, ax\n",
        0b_100010_11_11_100_001 => "mov sp, cx\n",
        0b_100010_11_11_100_010 => "mov sp, dx\n",
        0b_100010_11_11_100_011 => "mov sp, bx\n",
        0b_100010_11_11_100_100 => "mov sp, sp\n",
        0b_100010_11_11_100_101 => "mov sp, bp\n",
        0b_100010_11_11_100_110 => "mov sp, si\n",
        0b_100010_11_11_100_111 => "mov sp, di\n",
        //
        0b_100010_11_11_101_000 => "mov bp, ax\n",
        0b_100010_11_11_101_001 => "mov bp, cx\n",
        0b_100010_11_11_101_010 => "mov bp, dx\n",
        0b_100010_11_11_101_011 => "mov bp, bx\n",
        0b_100010_11_11_101_100 => "mov bp, sp\n",
        0b_100010_11_11_101_101 => "mov bp, bp\n",
        0b_100010_11_11_101_110 => "mov bp, si\n",
        0b_100010_11_11_101_111 => "mov bp, di\n",
        //
        0b_100010_11_11_110_000 => "mov si, ax\n",
        0b_100010_11_11_110_001 => "mov si, cx\n",
        0b_100010_11_11_110_010 => "mov si, dx\n",
        0b_100010_11_11_110_011 => "mov si, bx\n",
        0b_100010_11_11_110_100 => "mov si, sp\n",
        0b_100010_11_11_110_101 => "mov si, bp\n",
        0b_100010_11_11_110_110 => "mov si, si\n",
        0b_100010_11_11_110_111 => "mov si, di\n",
        //
        0b_100010_11_11_111_000 => "mov di, ax\n",
        0b_100010_11_11_111_001 => "mov di, cx\n",
        0b_100010_11_11_111_010 => "mov di, dx\n",
        0b_100010_11_11_111_011 => "mov di, bx\n",
        0b_100010_11_11_111_100 => "mov di, sp\n",
        0b_100010_11_11_111_101 => "mov di, bp\n",
        0b_100010_11_11_111_110 => "MOV DI, SI\n",
        0b_100010_11_11_111_111 => "MOV DI, DI\n",
        //
        0b_100010_01_11_010_000 => "mov ax, dx\n",
        0b_100010_01_11_010_001 => "mov cx, dx\n",
        0b_100010_01_11_010_010 => "mov dx, dx\n",
        0b_100010_01_11_010_011 => "mov bx, dx\n",
        0b_100010_01_11_010_100 => "mov sp, dx\n",
        0b_100010_01_11_010_101 => "mov bp, dx\n",
        0b_100010_01_11_010_110 => "mov si, dx\n",
        0b_100010_01_11_010_111 => "mov di, dx\n",
        //
        0b_100010_01_11_011_000 => "mov ax, bx\n",
        0b_100010_01_11_011_001 => "mov cx, bx\n",
        0b_100010_01_11_011_010 => "mov dx, bx\n",
        0b_100010_01_11_011_011 => "mov bx, bx\n",
        0b_100010_01_11_011_100 => "mov sp, bx\n",
        0b_100010_01_11_011_101 => "mov bp, bx\n",
        0b_100010_01_11_011_110 => "mov si, bx\n",
        0b_100010_01_11_011_111 => "mov di, bx\n",
        //
        0b_100010_01_11_100_000 => "mov ax, sp\n",
        0b_100010_01_11_100_001 => "mov cx, sp\n",
        0b_100010_01_11_100_010 => "mov dx, sp\n",
        0b_100010_01_11_100_011 => "mov bx, sp\n",
        0b_100010_01_11_100_100 => "mov sp, sp\n",
        0b_100010_01_11_100_101 => "mov bp, sp\n",
        0b_100010_01_11_100_110 => "mov si, sp\n",
        0b_100010_01_11_100_111 => "mov di, sp\n",
        //
        0b_100010_01_11_101_000 => "mov ax, bp\n",
        0b_100010_01_11_101_001 => "mov cx, bp\n",
        0b_100010_01_11_101_010 => "mov dx, bp\n",
        0b_100010_01_11_101_011 => "mov bx, bp\n",
        0b_100010_01_11_101_100 => "mov sp, bp\n",
        0b_100010_01_11_101_101 => "mov bp, bp\n",
        0b_100010_01_11_101_110 => "mov si, bp\n",
        0b_100010_01_11_101_111 => "mov di, bp\n",
        //
        0b_100010_01_11_110_000 => "mov ax, si\n",
        0b_100010_01_11_110_001 => "mov cx, si\n",
        0b_100010_01_11_110_010 => "mov dx, si\n",
        0b_100010_01_11_110_011 => "mov bx, si\n",
        0b_100010_01_11_110_100 => "mov sp, si\n",
        0b_100010_01_11_110_101 => "mov bp, si\n",
        0b_100010_01_11_110_110 => "mov si, si\n",
        0b_100010_01_11_110_111 => "mov di, si\n",
        //
        0b_100010_01_11_111_000 => "mov ax, di\n",
        0b_100010_01_11_111_001 => "mov cx, di\n",
        0b_100010_01_11_111_010 => "mov dx, di\n",
        0b_100010_01_11_111_011 => "mov bx, di\n",
        0b_100010_01_11_111_100 => "mov sp, di\n",
        0b_100010_01_11_111_101 => "mov bp, di\n",
        0b_100010_01_11_111_110 => "mov si, di\n",
        0b_100010_01_11_111_111 => "mov di, di\n",
        // REG IS DESTINATION FROM NOW ON + byte data.
        0b_100010_10_11_010_000 => "mov dl, al\n",
        0b_100010_10_11_010_001 => "mov dl, cl\n",
        0b_100010_10_11_010_010 => "mov dl, dl\n",
        0b_100010_10_11_010_011 => "mov dl, bl\n",
        0b_100010_10_11_010_100 => "mov dl, ah\n",
        0b_100010_10_11_010_101 => "mov dl, ch\n",
        0b_100010_10_11_010_110 => "mov dl, dh\n",
        0b_100010_10_11_010_111 => "mov dl, bh\n",
        //
        0b_100010_10_11_011_000 => "mov bl, al\n",
        0b_100010_10_11_011_001 => "mov bl, cl\n",
        0b_100010_10_11_011_010 => "mov bl, dl\n",
        0b_100010_10_11_011_011 => "mov bl, bl\n",
        0b_100010_10_11_011_100 => "mov bl, ah\n",
        0b_100010_10_11_011_101 => "mov bl, ch\n",
        0b_100010_10_11_011_110 => "mov bl, dh\n",
        0b_100010_10_11_011_111 => "mov bl, bh\n",
        //
        0b_100010_10_11_100_000 => "mov ah, al\n",
        0b_100010_10_11_100_001 => "mov ah, cl\n",
        0b_100010_10_11_100_010 => "mov ah, dl\n",
        0b_100010_10_11_100_011 => "mov ah, bl\n",
        0b_100010_10_11_100_100 => "mov ah, ah\n",
        0b_100010_10_11_100_101 => "mov ah, ch\n",
        0b_100010_10_11_100_110 => "mov ah, dh\n",
        0b_100010_10_11_100_111 => "mov ah, bh\n",
        //
        0b_100010_10_11_101_000 => "mov ch, al\n",
        0b_100010_10_11_101_001 => "mov ch, cl\n",
        0b_100010_10_11_101_010 => "mov ch, dl\n",
        0b_100010_10_11_101_011 => "mov ch, bl\n",
        0b_100010_10_11_101_100 => "mov ch, ah\n",
        0b_100010_10_11_101_101 => "mov ch, ch\n",
        0b_100010_10_11_101_110 => "mov ch, dh\n",
        0b_100010_10_11_101_111 => "mov ch, bh\n",
        //
        0b_100010_10_11_110_000 => "mov dh, al\n",
        0b_100010_10_11_110_001 => "mov dh, cl\n",
        0b_100010_10_11_110_010 => "mov dh, dl\n",
        0b_100010_10_11_110_011 => "mov dh, bl\n",
        0b_100010_10_11_110_100 => "mov dh, ah\n",
        0b_100010_10_11_110_101 => "mov dh, ch\n",
        0b_100010_10_11_110_110 => "mov dh, dh\n",
        0b_100010_10_11_110_111 => "mov dh, bh\n",
        //
        0b_100010_10_11_111_000 => "mov bh, al\n",
        0b_100010_10_11_111_001 => "mov bh, cl\n",
        0b_100010_10_11_111_010 => "mov bh, dl\n",
        0b_100010_10_11_111_011 => "mov bh, bl\n",
        0b_100010_10_11_111_100 => "mov bh, ah\n",
        0b_100010_10_11_111_101 => "mov bh, ch\n",
        0b_100010_10_11_111_110 => "mov bh, dh\n",
        0b_100010_10_11_111_111 => "mov bh, bh\n",
        //
        0b_100010_01_11_000_011 => "mov bx, ax\n",
        0b_100010_01_11_000_101 => "mov bp, ax\n",
        _ => panic!("Unknown instruction: {:016b}\n", byte),
    };
}
// };
fn main() {
    let args: Vec<String> = env::args().collect();
    let binary_path = &args[1];
    let binary_contents = fs::read(binary_path).unwrap();
    let instructions = binary_contents.chunks(2);

    for inst in instructions {
        let first_half = inst[0] as u16;
        let second_half = inst[1] as u16;

        let byte: u16 = (first_half) << 8;

        let combined_bytes = byte | second_half;

        let inst = get_instruction(combined_bytes);
        print!("{}", inst);
    }
}

// ALL THE POSSIBLE INSTRUCTIONS

////////////////////////////////
// 0b_100010_00_11_000_000
// 0b_100010_00_11_000_001
// 0b_100010_00_11_000_010
// 0b_100010_00_11_000_011
// 0b_100010_00_11_000_100
// 0b_100010_00_11_000_101
// 0b_100010_00_11_000_110
// 0b_100010_00_11_000_111

// 0b_100010_00_11_001_000
// 0b_100010_00_11_001_001
// 0b_100010_00_11_001_010
// 0b_100010_00_11_001_011
// 0b_100010_00_11_001_100
// 0b_100010_00_11_001_101
// 0b_100010_00_11_001_110
// 0b_100010_00_11_001_111

// 0b_100010_00_11_010_010
// 0b_100010_00_11_010_011
// 0b_100010_00_11_010_010
// 0b_100010_00_11_010_011
// 0b_100010_00_11_010_100
// 0b_100010_00_11_010_101
// 0b_100010_00_11_010_110
// 0b_100010_00_11_010_111

// 0b_100010_00_11_011_000
// 0b_100010_00_11_011_001
// 0b_100010_00_11_011_010
// 0b_100010_00_11_011_011
// 0b_100010_00_11_011_100
// 0b_100010_00_11_011_101
// 0b_100010_00_11_011_110
// 0b_100010_00_11_011_111

// 0b_100010_00_11_100_000
// 0b_100010_00_11_100_001
// 0b_100010_00_11_100_010
// 0b_100010_00_11_100_011
// 0b_100010_00_11_100_100
// 0b_100010_00_11_100_101
// 0b_100010_00_11_100_110
// 0b_100010_00_11_100_111

// 0b_100010_00_11_101_000
// 0b_100010_00_11_101_001
// 0b_100010_00_11_101_010
// 0b_100010_00_11_101_011
// 0b_100010_00_11_101_100
// 0b_100010_00_11_101_101
// 0b_100010_00_11_101_110
// 0b_100010_00_11_101_111

// 0b_100010_00_11_110_000
// 0b_100010_00_11_110_001
// 0b_100010_00_11_110_010
// 0b_100010_00_11_110_011
// 0b_100010_00_11_110_100
// 0b_100010_00_11_110_101
// 0b_100010_00_11_110_110
// 0b_100010_00_11_110_111

// 0b_100010_00_11_111_000
// 0b_100010_00_11_111_001
// 0b_100010_00_11_111_010
// 0b_100010_00_11_111_011
// 0b_100010_00_11_111_100
// 0b_100010_00_11_111_101
// 0b_100010_00_11_111_110
// 0b_100010_00_11_111_111

////////////////////////////////

// 0b_100010_11_11_000_000
// 0b_100010_11_11_000_001
// 0b_100010_11_11_000_010
// 0b_100010_11_11_000_011
// 0b_100010_11_11_000_100
// 0b_100010_11_11_000_101
// 0b_100010_11_11_000_110
// 0b_100010_11_11_000_111

// 0b_100010_11_11_001_000
// 0b_100010_11_11_001_001
// 0b_100010_11_11_001_010
// 0b_100010_11_11_001_011
// 0b_100010_11_11_001_100
// 0b_100010_11_11_001_101
// 0b_100010_11_11_001_110
// 0b_100010_11_11_001_111

// 0b_100010_11_11_010_000
// 0b_100010_11_11_010_001
// 0b_100010_11_11_010_010
// 0b_100010_11_11_010_011
// 0b_100010_11_11_010_100
// 0b_100010_11_11_010_101
// 0b_100010_11_11_010_110
// 0b_100010_11_11_010_111

// 0b_100010_11_11_011_000
// 0b_100010_11_11_011_001
// 0b_100010_11_11_011_010
// 0b_100010_11_11_011_011
// 0b_100010_11_11_011_100
// 0b_100010_11_11_011_101
// 0b_100010_11_11_011_110
// 0b_100010_11_11_011_111

// 0b_100010_11_11_100_000
// 0b_100010_11_11_100_001
// 0b_100010_11_11_100_010
// 0b_100010_11_11_100_011
// 0b_100010_11_11_100_100
// 0b_100010_11_11_100_101
// 0b_100010_11_11_100_110
// 0b_100010_11_11_100_111

// 0b_100010_11_11_101_000
// 0b_100010_11_11_101_001
// 0b_100010_11_11_101_010
// 0b_100010_11_11_101_011
// 0b_100010_11_11_101_100
// 0b_100010_11_11_101_101
// 0b_100010_11_11_101_110
// 0b_100010_11_11_101_111

// 0b_100010_11_11_110_000
// 0b_100010_11_11_110_001
// 0b_100010_11_11_110_010
// 0b_100010_11_11_110_011
// 0b_100010_11_11_110_100
// 0b_100010_11_11_110_101
// 0b_100010_11_11_110_110
// 0b_100010_11_11_110_111

// 0b_100010_11_11_111_000
// 0b_100010_11_11_111_001
// 0b_100010_11_11_111_010
// 0b_100010_11_11_111_011
// 0b_100010_11_11_111_100
// 0b_100010_11_11_111_101
// 0b_100010_11_11_111_110
// 0b_100010_11_11_111_111

// 0b_100010_11_11_000_000
// 0b_100010_11_11_000_001
// 0b_100010_11_11_000_010
// 0b_100010_11_11_000_011
// 0b_100010_11_11_000_100
// 0b_100010_11_11_000_101
// 0b_100010_11_11_000_110
// 0b_100010_11_11_000_111

// 0b_100010_11_11_001_000
// 0b_100010_11_11_001_001
// 0b_100010_11_11_001_010
// 0b_100010_11_11_001_011
// 0b_100010_11_11_001_100
// 0b_100010_11_11_001_101
// 0b_100010_11_11_001_110
// 0b_100010_11_11_001_111

// 0b_100010_11_11_010_000
// 0b_100010_11_11_010_001
// 0b_100010_11_11_010_010
// 0b_100010_11_11_010_011
// 0b_100010_11_11_010_100
// 0b_100010_11_11_010_101
// 0b_100010_11_11_010_110
// 0b_100010_11_11_010_111

////////////////////////////////
// 0b_100010_01_11_010_000
// 0b_100010_01_11_010_001
// 0b_100010_01_11_010_010
// 0b_100010_01_11_010_011
// 0b_100010_01_11_010_100
// 0b_100010_01_11_010_101
// 0b_100010_01_11_010_110
// 0b_100010_01_11_010_111

// 0b_100010_01_11_011_000
// 0b_100010_01_11_011_001
// 0b_100010_01_11_011_010
// 0b_100010_01_11_011_011
// 0b_100010_01_11_011_100
// 0b_100010_01_11_011_101
// 0b_100010_01_11_011_110
// 0b_100010_01_11_011_111

// 0b_100010_01_11_100_000
// 0b_100010_01_11_100_001
// 0b_100010_01_11_100_010
// 0b_100010_01_11_100_011
// 0b_100010_01_11_100_100
// 0b_100010_01_11_100_101
// 0b_100010_01_11_100_110
// 0b_100010_01_11_100_111

// 0b_100010_01_11_101_000
// 0b_100010_01_11_101_001
// 0b_100010_01_11_101_010
// 0b_100010_01_11_101_011
// 0b_100010_01_11_101_100
// 0b_100010_01_11_101_101
// 0b_100010_01_11_101_110
// 0b_100010_01_11_101_111

// 0b_100010_01_11_110_000
// 0b_100010_01_11_110_001
// 0b_100010_01_11_110_010
// 0b_100010_01_11_110_011
// 0b_100010_01_11_110_100
// 0b_100010_01_11_110_101
// 0b_100010_01_11_110_110
// 0b_100010_01_11_110_111

// 0b_100010_01_11_111_000
// 0b_100010_01_11_111_001
// 0b_100010_01_11_111_010
// 0b_100010_01_11_111_011
// 0b_100010_01_11_111_100
// 0b_100010_01_11_111_101
// 0b_100010_01_11_111_110
// 0b_100010_01_11_111_111

////////////////////////////////
// 0b_100010_10_11_010_000
// 0b_100010_10_11_010_001
// 0b_100010_10_11_010_010
// 0b_100010_10_11_010_011
// 0b_100010_10_11_010_100
// 0b_100010_10_11_010_101
// 0b_100010_10_11_010_110
// 0b_100010_10_11_010_111

// 0b_100010_10_11_011_000
// 0b_100010_10_11_011_001
// 0b_100010_10_11_011_010
// 0b_100010_10_11_011_011
// 0b_100010_10_11_011_100
// 0b_100010_10_11_011_101
// 0b_100010_10_11_011_110
// 0b_100010_10_11_011_111

// 0b_100010_10_11_100_000
// 0b_100010_10_11_100_001
// 0b_100010_10_11_100_010
// 0b_100010_10_11_100_011
// 0b_100010_10_11_100_100
// 0b_100010_10_11_100_101
// 0b_100010_10_11_100_110
// 0b_100010_10_11_100_111

// 0b_100010_10_11_101_000
// 0b_100010_10_11_101_001
// 0b_100010_10_11_101_010
// 0b_100010_10_11_101_011
// 0b_100010_10_11_101_100
// 0b_100010_10_11_101_101
// 0b_100010_10_11_101_110
// 0b_100010_10_11_101_111

// 0b_100010_10_11_110_000
// 0b_100010_10_11_110_001
// 0b_100010_10_11_110_010
// 0b_100010_10_11_110_011
// 0b_100010_10_11_110_100
// 0b_100010_10_11_110_101
// 0b_100010_10_11_110_110
// 0b_100010_10_11_110_111

// 0b_100010_10_11_111_000
// 0b_100010_10_11_111_001
// 0b_100010_10_11_111_010
// 0b_100010_10_11_111_011
// 0b_100010_10_11_111_100
// 0b_100010_10_11_111_101
// 0b_100010_10_11_111_110
// 0b_100010_10_11_111_111
// D = 0 = Instruction source is specified in the REG field
// W = 0 = Instruction operate on byte data
