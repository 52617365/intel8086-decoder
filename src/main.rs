pub mod instructions;
use std::collections::HashMap;
use std::{env, fs};

macro_rules! create_hashmap {
    ($( $key:expr => $value:expr ),*) => {{
        let mut map = HashMap::new();
        $( map.insert($key, $value); )*
        map
    }};
}

static map: HashMap<u8, &'static str> = create_hashmap![
    0b_100010_00_11_000_000 => "MOV AL, AL\n",
    0b_100010_00_11_000_001 => "MOV CL, AL\n",
    0b_100010_00_11_000_010 => "MOV DL, AL\n",
    0b_100010_00_11_000_011 => "MOV BL, AL\n",
    0b_100010_00_11_000_100 => "MOV AH, AL\n",
    0b_100010_00_11_000_101 => "MOV CH, AL\n",
    0b_100010_00_11_000_110 => "MOV DH, AL\n",
    0b_100010_00_11_000_111 => "MOV BH, AL\n",
    //
    0b_100010_00_11_001_000 => "MOV AL, CL\n",
    0b_100010_00_11_001_001 => "MOV CL, CL\n",
    0b_100010_00_11_001_010 => "MOV DL, CL\n",
    0b_100010_00_11_001_011 => "MOV BL, CL\n",
    0b_100010_00_11_001_100 => "MOV AH, CL\n",
    0b_100010_00_11_001_101 => "MOV CH, CL\n",
    0b_100010_00_11_001_110 => "MOV DH, CL\n",
    0b_100010_00_11_001_111 => "MOV BH, CL\n",
    //
    0b_100010_00_11_010_000 => "MOV AL, DL\n",
    0b_100010_00_11_010_001 => "MOV CL, DL\n",
    0b_100010_00_11_010_010 => "MOV DL, DL\n",
    0b_100010_00_11_010_011 => "MOV BL, DL\n",
    0b_100010_00_11_010_100 => "MOV AH, DL\n",
    0b_100010_00_11_010_101 => "MOV CH, DL\n",
    0b_100010_00_11_010_110 => "MOV DH, DL\n",
    0b_100010_00_11_010_111 => "MOV BH, DL\n",
    //
    0b_100010_00_11_011_000 => "MOV AL, BL\n",
    0b_100010_00_11_011_001 => "MOV CL, BL\n",
    0b_100010_00_11_011_010 => "MOV DL, BL\n",
    0b_100010_00_11_011_011 => "MOV BL, BL\n",
    0b_100010_00_11_011_100 => "MOV AH, BL\n",
    0b_100010_00_11_011_101 => "MOV CH, BL\n",
    0b_100010_00_11_011_110 => "MOV DH, BL\n",
    0b_100010_00_11_011_111 => "MOV BH, BL\n",
    //
    0b_100010_00_11_100_000 => "MOV AL, AH\n",
    0b_100010_00_11_100_001 => "MOV CL, AH\n",
    0b_100010_00_11_100_010 => "MOV DL, AH\n",
    0b_100010_00_11_100_011 => "MOV BL, AH\n",
    0b_100010_00_11_100_100 => "MOV AH, AH\n",
    0b_100010_00_11_100_101 => "MOV CH, AH\n",
    0b_100010_00_11_100_110 => "MOV DH, AH\n",
    0b_100010_00_11_100_111 => "MOV BH, AH\n",
    //
    0b_100010_00_11_101_000 => "MOV AL, CH\n",
    0b_100010_00_11_101_001 => "MOV CL, CH\n",
    0b_100010_00_11_101_010 => "MOV DL, CH\n",
    0b_100010_00_11_101_011 => "MOV BL, CH\n",
    0b_100010_00_11_101_100 => "MOV AH, CH\n",
    0b_100010_00_11_101_101 => "MOV CH, CH\n",
    0b_100010_00_11_101_110 => "MOV DH, CH\n",
    0b_100010_00_11_101_111 => "MOV BH, CH\n",
    //
    0b_100010_00_11_110_000 => "MOV AL, DH\n",
    0b_100010_00_11_110_001 => "MOV CL, DH\n",
    0b_100010_00_11_110_010 => "MOV DL, DH\n",
    0b_100010_00_11_110_011 => "MOV BL, DH\n",
    0b_100010_00_11_110_100 => "MOV AH, DH\n",
    0b_100010_00_11_110_101 => "MOV CH, DH\n",
    0b_100010_00_11_110_110 => "MOV DH, DH\n",
    0b_100010_00_11_110_111 => "MOV BH, DH\n",
    //
    0b_100010_00_11_111_000 => "MOV AL, BH\n",
    0b_100010_00_11_111_001 => "MOV CL, BH\n",
    0b_100010_00_11_111_010 => "MOV DL, BH\n",
    0b_100010_00_11_111_011 => "MOV BL, BH\n",
    0b_100010_00_11_111_100 => "MOV AH, BH\n",
    0b_100010_00_11_111_101 => "MOV CH, BH\n",
    0b_100010_00_11_111_110 => "MOV DH, BH\n",
    0b_100010_00_11_111_111 => "MOV BH, BH\n",
    //
    0b_100010_11_11_000_000 => "MOV AX, AX\n",
    0b_100010_11_11_000_001 => "MOV AX, CX\n",
    0b_100010_11_11_000_010 => "MOV AX, DX\n",
    0b_100010_11_11_000_011 => "MOV AX, BX\n",
    0b_100010_11_11_000_100 => "MOV AX, SP\n",
    0b_100010_11_11_000_101 => "MOV AX, BP\n",
    0b_100010_11_11_000_110 => "MOV AX, SI\n",
    0b_100010_11_11_000_111 => "MOV AX, DI\n",
    //
    0b_100010_11_11_001_000 => "MOV CX, AX\n",
    0b_100010_11_11_001_001 => "MOV CX, CX\n",
    0b_100010_11_11_001_010 => "MOV CX, DX\n",
    0b_100010_11_11_001_011 => "MOV CX, BX\n",
    0b_100010_11_11_001_100 => "MOV CX, SP\n",
    0b_100010_11_11_001_101 => "MOV CX, BP\n",
    0b_100010_11_11_001_110 => "MOV CX, SI\n",
    0b_100010_11_11_001_111 => "MOV CX, DI\n",
    //
    0b_100010_11_11_010_000 => "MOV DX, AX\n",
    0b_100010_11_11_010_001 => "MOV DX, CX\n",
    0b_100010_11_11_010_010 => "MOV DX, DX\n",
    0b_100010_11_11_010_011 => "MOV DX, BX\n",
    0b_100010_11_11_010_100 => "MOV DX, SP\n",
    0b_100010_11_11_010_101 => "MOV DX, BP\n",
    0b_100010_11_11_010_110 => "MOV DX, SI\n",
    0b_100010_11_11_010_111 => "MOV DX, DI\n",
    //
    0b_100010_11_11_011_000 => "MOV BX, AX\n",
    0b_100010_11_11_011_001 => "MOV BX, CX\n",
    0b_100010_11_11_011_010 => "MOV BX, DX\n",
    0b_100010_11_11_011_011 => "MOV BX, BX\n",
    0b_100010_11_11_011_100 => "MOV BX, SP\n",
    0b_100010_11_11_011_101 => "MOV BX, BP\n",
    0b_100010_11_11_011_110 => "MOV BX, SI\n",
    0b_100010_11_11_011_111 => "MOV BX, DI\n",
//
    0b_100010_11_11_100_000 => "MOV SP, AX\n",
    0b_100010_11_11_100_001 => "MOV SP, CX\n",
    0b_100010_11_11_100_010 => "MOV SP, DX\n",
    0b_100010_11_11_100_011 => "MOV SP, BX\n",
    0b_100010_11_11_100_100 => "MOV SP, SP\n",
    0b_100010_11_11_100_101 => "MOV SP, BP\n",
    0b_100010_11_11_100_110 => "MOV SP, SI\n",
    0b_100010_11_11_100_111 => "MOV SP, DI\n",
    //
    0b_100010_11_11_101_000 => "MOV BP, AX\n",
    0b_100010_11_11_101_001 => "MOV BP, CX\n",
    0b_100010_11_11_101_010 => "MOV BP, DX\n",
    0b_100010_11_11_101_011 => "MOV BP, BX\n",
    0b_100010_11_11_101_100 => "MOV BP, SP\n",
    0b_100010_11_11_101_101 => "MOV BP, BP\n",
    0b_100010_11_11_101_110 => "MOV BP, SI\n",
    0b_100010_11_11_101_111 => "MOV BP, DI\n",
    //
    0b_100010_11_11_110_000 => "MOV SI, AX\n",
    0b_100010_11_11_110_001 => "MOV SI, CX\n",
    0b_100010_11_11_110_010 => "MOV SI, DX\n",
    0b_100010_11_11_110_011 => "MOV SI, BX\n",
    0b_100010_11_11_110_100 => "MOV SI, SP\n",
    0b_100010_11_11_110_101 => "MOV SI, BP\n",
    0b_100010_11_11_110_110 => "MOV SI, SI\n",
    0b_100010_11_11_110_111 => "MOV SI, DI\n",
    //
    0b_100010_11_11_111_000 => "MOV DI, AX\n",
    0b_100010_11_11_111_001 => "MOV DI, CX\n",
    0b_100010_11_11_111_010 => "MOV DI, DX\n",
    0b_100010_11_11_111_011 => "MOV DI, BX\n",
    0b_100010_11_11_111_100 => "MOV DI, SP\n",
    0b_100010_11_11_111_101 => "MOV DI, BP\n",
    0b_100010_11_11_111_110 => "MOV DI, SI\n",
    0b_100010_11_11_111_111 => "MOV DI, DI\n",
    //
    0b_100010_11_11_000_000 => "MOV DI, AX\n";
    0b_100010_11_11_000_001 => "MOV DI, CX\n";
    0b_100010_11_11_000_010 => "MOV DI, DX\n";
    0b_100010_11_11_000_011 => "MOV DI, BX\n";
    0b_100010_11_11_000_100 => "MOV DI, SP\n";
    0b_100010_11_11_000_101 => "MOV DI, BP\n";
    0b_100010_11_11_000_110 => "MOV DI, SI\n";
    0b_100010_11_11_000_111 => "MOV DI, DI\n";
    //
    0b_100010_11_11_001_000 => "MOV CX, AX\n";
    0b_100010_11_11_001_001 => "MOV CX, CX\n";
    0b_100010_11_11_001_010 => "MOV CX, DX\n";
    0b_100010_11_11_001_011 => "MOV CX, BX\n";
    0b_100010_11_11_001_100 => "MOV CX, SP\n";
    0b_100010_11_11_001_101 => "MOV CX, BP\n";
    0b_100010_11_11_001_110 => "MOV CX, SI\n";
    0b_100010_11_11_001_111 => "MOV CX, DI\n";
    //
    0b_100010_11_11_010_000 => "MOV DX, AX\n";
    0b_100010_11_11_010_001 => "MOV DX, CX\n";
    0b_100010_11_11_010_010 => "MOV DX, DX\n";
    0b_100010_11_11_010_011 => "MOV DX, BX\n";
    0b_100010_11_11_010_100 => "MOV DX, SP\n";
    0b_100010_11_11_010_101 => "MOV DX, BP\n";
    0b_100010_11_11_010_110 => "MOV DX, SI\n";
    0b_100010_11_11_010_111 => "MOV DX, DI\n";
    //
    0b_100010_01_11_010_000 => "MOV AX, DX\n";
    0b_100010_01_11_010_001 => "MOV CX, DX\n";
    0b_100010_01_11_010_010 => "MOV DX, DX\n";
    0b_100010_01_11_010_011 => "MOV BX, DX\n";
    0b_100010_01_11_010_100 => "MOV SP, DX\n";
    0b_100010_01_11_010_101 => "MOV BP, DX\n";
    0b_100010_01_11_010_110 => "MOV SI, DX\n";
    0b_100010_01_11_010_111 => "MOV DI, DX\n";
    //
    0b_100010_01_11_011_000 => "MOV AX, BX\n";
    0b_100010_01_11_011_001 => "MOV CX, BX\n";
    0b_100010_01_11_011_010 => "MOV DX, BX\n";
    0b_100010_01_11_011_011 => "MOV BX, BX\n";
    0b_100010_01_11_011_100 => "MOV SP, BX\n";
    0b_100010_01_11_011_101 => "MOV BP, BX\n";
    0b_100010_01_11_011_110 => "MOV SI, BX\n";
    0b_100010_01_11_011_111 => "MOV DI, BX\n";
    //
    0b_100010_01_11_100_000 => "MOV AX, SP\n";
    0b_100010_01_11_100_001 => "MOV CX, SP\n";
    0b_100010_01_11_100_010 => "MOV DX, SP\n";
    0b_100010_01_11_100_011 => "MOV BX, SP\n";
    0b_100010_01_11_100_100 => "MOV SP, SP\n";
    0b_100010_01_11_100_101 => "MOV BP, SP\n";
    0b_100010_01_11_100_110 => "MOV SI, SP\n";
    0b_100010_01_11_100_111 => "MOV DI, SP\n";
    //
    0b_100010_01_11_101_000 => "MOV AX, BP\n";
    0b_100010_01_11_101_001 => "MOV CX, BP\n";
    0b_100010_01_11_101_010 => "MOV DX, BP\n";
    0b_100010_01_11_101_011 => "MOV BX, BP\n";
    0b_100010_01_11_101_100 => "MOV SP, BP\n";
    0b_100010_01_11_101_101 => "MOV BP, BP\n";
    0b_100010_01_11_101_110 => "MOV SI, BP\n";
    0b_100010_01_11_101_111 => "MOV DI, BP\n";
    //
    0b_100010_01_11_110_000 => "MOV AX, SI\n";
    0b_100010_01_11_110_001 => "MOV CX, SI\n";
    0b_100010_01_11_110_010 => "MOV DX, SI\n";
    0b_100010_01_11_110_011 => "MOV BX, SI\n";
    0b_100010_01_11_110_100 => "MOV SP, SI\n";
    0b_100010_01_11_110_101 => "MOV BP, SI\n";
    0b_100010_01_11_110_110 => "MOV SI, SI\n";
    0b_100010_01_11_110_111 => "MOV DI, SI\n";
    //
    0b_100010_01_11_111_000 => "MOV AX, DI\n";
    0b_100010_01_11_111_001 => "MOV CX, DI\n";
    0b_100010_01_11_111_010 => "MOV DX, DI\n";
    0b_100010_01_11_111_011 => "MOV BX, DI\n";
    0b_100010_01_11_111_100 => "MOV SP, DI\n";
    0b_100010_01_11_111_101 => "MOV BP, DI\n";
    0b_100010_01_11_111_110 => "MOV SI, DI\n";
    0b_100010_01_11_111_111 => "MOV DI, DI\n";
    // REG IS DESTINATION FROM NOW ON + byte data.
    0b_100010_10_11_010_000 => "MOV DL, AL\n";
    0b_100010_10_11_010_001 => "MOV DL, CL\n";
    0b_100010_10_11_010_010 => "MOV DL, DL\n";
    0b_100010_10_11_010_011 => "MOV DL, BL\n";
    0b_100010_10_11_010_100 => "MOV DL, AH\n";
    0b_100010_10_11_010_101 => "MOV DL, CH\n";
    0b_100010_10_11_010_110 => "MOV DL, DH\n";
    0b_100010_10_11_010_111 => "MOV DL, BH\n";
    //
    0b_100010_10_11_011_000 => "MOV BL, AL\n";
    0b_100010_10_11_011_001 => "MOV BL, CL\n";
    0b_100010_10_11_011_010 => "MOV BL, DL\n";
    0b_100010_10_11_011_011 => "MOV BL, BL\n";
    0b_100010_10_11_011_100 => "MOV BL, AH\n";
    0b_100010_10_11_011_101 => "MOV BL, CH\n";
    0b_100010_10_11_011_110 => "MOV BL, DH\n";
    0b_100010_10_11_011_111 => "MOV BL, BH\n";
    //
    0b_100010_10_11_100_000 => "MOV AH, AL\n",
    0b_100010_10_11_100_001 => "MOV AH, CL\n",
    0b_100010_10_11_100_010 => "MOV AH, DL\n",
    0b_100010_10_11_100_011 => "MOV AH, BL\n",
    0b_100010_10_11_100_100 => "MOV AH, AH\n",
    0b_100010_10_11_100_101 => "MOV AH, CH\n",
    0b_100010_10_11_100_110 => "MOV AH, DH\n",
    0b_100010_10_11_100_111 => "MOV AH, BH\n",
    //
    0b_100010_10_11_101_000 => "MOV CH, AL\n",
    0b_100010_10_11_101_001 => "MOV CH, CL\n",
    0b_100010_10_11_101_010 => "MOV CH, DL\n",
    0b_100010_10_11_101_011 => "MOV CH, BL\n",
    0b_100010_10_11_101_100 => "MOV CH, AH\n",
    0b_100010_10_11_101_101 => "MOV CH, CH\n",
    0b_100010_10_11_101_110 => "MOV CH, DH\n",
    0b_100010_10_11_101_111 => "MOV CH, BH\n",
    //
    0b_100010_10_11_100_000 => "MOV AH, AL\n";
    0b_100010_10_11_100_001 => "MOV AH, CL\n";
    0b_100010_10_11_100_010 => "MOV AH, DL\n";
    0b_100010_10_11_100_011 => "MOV AH, BL\n";
    0b_100010_10_11_100_100 => "MOV AH, AH\n";
    0b_100010_10_11_100_101 => "MOV AH, CH\n";
    0b_100010_10_11_100_110 => "MOV AH, DH\n";
    0b_100010_10_11_100_111 => "MOV AH, BH\n";
    //
    0b_100010_10_11_101_000 => "MOV CH, AL\n";
    0b_100010_10_11_101_001 => "MOV CH, CL\n";
    0b_100010_10_11_101_010 => "MOV CH, DL\n";
    0b_100010_10_11_101_011 => "MOV CH, BL\n";
    0b_100010_10_11_101_100 => "MOV CH, AH\n";
    0b_100010_10_11_101_101 => "MOV CH, CH\n";
    0b_100010_10_11_101_110 => "MOV CH, DH\n";
    0b_100010_10_11_101_111 => "MOV CH, BH\n";
    //
    0b_100010_10_11_110_000 => "MOV DH, AL\n";
    0b_100010_10_11_110_001 => "MOV DH, CL\n";
    0b_100010_10_11_110_010 => "MOV DH, DL\n";
    0b_100010_10_11_110_011 => "MOV DH, BL\n";
    0b_100010_10_11_110_100 => "MOV DH, AH\n";
    0b_100010_10_11_110_101 => "MOV DH, CH\n";
    0b_100010_10_11_110_110 => "MOV DH, DH\n";
    0b_100010_10_11_110_111 => "MOV DH, BH\n";
    //
    0b_100010_10_11_111_000 => "MOV BH, AL\n";
    0b_100010_10_11_111_001 => "MOV BH, CL\n";
    0b_100010_10_11_111_010 => "MOV BH, DL\n";
    0b_100010_10_11_111_011 => "MOV BH, BL\n";
    0b_100010_10_11_111_100 => "MOV BH, AH\n";
    0b_100010_10_11_111_101 => "MOV BH, CH\n";
    0b_100010_10_11_111_110 => "MOV BH, DH\n";
    0b_100010_10_11_111_111 => "MOV BH, BH\n";
    //
];
fn main() {
    let args: Vec<String> = env::args().collect();
    let binary_path = &args[1];
    let binary_contents = fs::read(binary_path).unwrap();
    let instructions = binary_contents.chunks(2);

    let mut asm: String = String::new();

    let bit_mask: u8 = 0b_100010_11_11_111_111;

    let mut SRC_REG: &str;
    let mut DST_REG: &str;

    for inst in instructions {
        for byte in inst {
            let res = *byte & bit_mask;
            let inst = map[&res];
            println!("{}", inst);
        }
    }
}
//           DW_MOD_REG_R/M
// 0b_100010_00_00_000_000 mask

// ALL THE POSSIBLE INSTRUCTIONS

//////////////////////////////// Destination is EAX, {here}
// 0b_100010_00_11_000_000
// 0b_100010_00_11_000_001
// 0b_100010_00_11_000_010
// 0b_100010_00_11_000_011
// 0b_100010_00_11_000_100
// 0b_100010_00_11_000_101
// 0b_100010_00_11_000_110
// 0b_100010_00_11_000_111

// 0b_100010_00_11_001_000
// 0b_100010_00_11_001_001
// 0b_100010_00_11_001_010
// 0b_100010_00_11_001_011
// 0b_100010_00_11_001_100
// 0b_100010_00_11_001_101
// 0b_100010_00_11_001_110
// 0b_100010_00_11_001_111

// 0b_100010_00_11_010_010
// 0b_100010_00_11_010_011
// 0b_100010_00_11_010_010
// 0b_100010_00_11_010_011
// 0b_100010_00_11_010_100
// 0b_100010_00_11_010_101
// 0b_100010_00_11_010_110
// 0b_100010_00_11_010_111

// 0b_100010_00_11_011_000
// 0b_100010_00_11_011_001
// 0b_100010_00_11_011_010
// 0b_100010_00_11_011_011
// 0b_100010_00_11_011_100
// 0b_100010_00_11_011_101
// 0b_100010_00_11_011_110
// 0b_100010_00_11_011_111

// 0b_100010_00_11_100_000
// 0b_100010_00_11_100_001
// 0b_100010_00_11_100_010
// 0b_100010_00_11_100_011
// 0b_100010_00_11_100_100
// 0b_100010_00_11_100_101
// 0b_100010_00_11_100_110
// 0b_100010_00_11_100_111

// 0b_100010_00_11_101_000
// 0b_100010_00_11_101_001
// 0b_100010_00_11_101_010
// 0b_100010_00_11_101_011
// 0b_100010_00_11_101_100
// 0b_100010_00_11_101_101
// 0b_100010_00_11_101_110
// 0b_100010_00_11_101_111

// 0b_100010_00_11_110_000
// 0b_100010_00_11_110_001
// 0b_100010_00_11_110_010
// 0b_100010_00_11_110_011
// 0b_100010_00_11_110_100
// 0b_100010_00_11_110_101
// 0b_100010_00_11_110_110
// 0b_100010_00_11_110_111

// 0b_100010_00_11_111_000
// 0b_100010_00_11_111_001
// 0b_100010_00_11_111_010
// 0b_100010_00_11_111_011
// 0b_100010_00_11_111_100
// 0b_100010_00_11_111_101
// 0b_100010_00_11_111_110
// 0b_100010_00_11_111_111

////////////////////////////////

// 0b_100010_11_11_000_000
// 0b_100010_11_11_000_001
// 0b_100010_11_11_000_010
// 0b_100010_11_11_000_011
// 0b_100010_11_11_000_100
// 0b_100010_11_11_000_101
// 0b_100010_11_11_000_110
// 0b_100010_11_11_000_111

// 0b_100010_11_11_001_000
// 0b_100010_11_11_001_001
// 0b_100010_11_11_001_010
// 0b_100010_11_11_001_011
// 0b_100010_11_11_001_100
// 0b_100010_11_11_001_101
// 0b_100010_11_11_001_110
// 0b_100010_11_11_001_111

// 0b_100010_11_11_010_000
// 0b_100010_11_11_010_001
// 0b_100010_11_11_010_010
// 0b_100010_11_11_010_011
// 0b_100010_11_11_010_100
// 0b_100010_11_11_010_101
// 0b_100010_11_11_010_110
// 0b_100010_11_11_010_111

// 0b_100010_11_11_011_000
// 0b_100010_11_11_011_001
// 0b_100010_11_11_011_010
// 0b_100010_11_11_011_011
// 0b_100010_11_11_011_100
// 0b_100010_11_11_011_101
// 0b_100010_11_11_011_110
// 0b_100010_11_11_011_111

// 0b_100010_11_11_100_000
// 0b_100010_11_11_100_001
// 0b_100010_11_11_100_010
// 0b_100010_11_11_100_011
// 0b_100010_11_11_100_100
// 0b_100010_11_11_100_101
// 0b_100010_11_11_100_110
// 0b_100010_11_11_100_111

// 0b_100010_11_11_101_000
// 0b_100010_11_11_101_001
// 0b_100010_11_11_101_010
// 0b_100010_11_11_101_011
// 0b_100010_11_11_101_100
// 0b_100010_11_11_101_101
// 0b_100010_11_11_101_110
// 0b_100010_11_11_101_111

// 0b_100010_11_11_110_000
// 0b_100010_11_11_110_001
// 0b_100010_11_11_110_010
// 0b_100010_11_11_110_011
// 0b_100010_11_11_110_100
// 0b_100010_11_11_110_101
// 0b_100010_11_11_110_110
// 0b_100010_11_11_110_111

// 0b_100010_11_11_111_000
// 0b_100010_11_11_111_001
// 0b_100010_11_11_111_010
// 0b_100010_11_11_111_011
// 0b_100010_11_11_111_100
// 0b_100010_11_11_111_101
// 0b_100010_11_11_111_110
// 0b_100010_11_11_111_111

// 0b_100010_11_11_000_000
// 0b_100010_11_11_000_001
// 0b_100010_11_11_000_010
// 0b_100010_11_11_000_011
// 0b_100010_11_11_000_100
// 0b_100010_11_11_000_101
// 0b_100010_11_11_000_110
// 0b_100010_11_11_000_111

// 0b_100010_11_11_001_000
// 0b_100010_11_11_001_001
// 0b_100010_11_11_001_010
// 0b_100010_11_11_001_011
// 0b_100010_11_11_001_100
// 0b_100010_11_11_001_101
// 0b_100010_11_11_001_110
// 0b_100010_11_11_001_111

// 0b_100010_11_11_010_000
// 0b_100010_11_11_010_001
// 0b_100010_11_11_010_010
// 0b_100010_11_11_010_011
// 0b_100010_11_11_010_100
// 0b_100010_11_11_010_101
// 0b_100010_11_11_010_110
// 0b_100010_11_11_010_111

////////////////////////////////
// 0b_100010_01_11_010_000
// 0b_100010_01_11_010_001
// 0b_100010_01_11_010_010
// 0b_100010_01_11_010_011
// 0b_100010_01_11_010_100
// 0b_100010_01_11_010_101
// 0b_100010_01_11_010_110
// 0b_100010_01_11_010_111

// 0b_100010_01_11_011_000
// 0b_100010_01_11_011_001
// 0b_100010_01_11_011_010
// 0b_100010_01_11_011_011
// 0b_100010_01_11_011_100
// 0b_100010_01_11_011_101
// 0b_100010_01_11_011_110
// 0b_100010_01_11_011_111

// 0b_100010_01_11_100_000
// 0b_100010_01_11_100_001
// 0b_100010_01_11_100_010
// 0b_100010_01_11_100_011
// 0b_100010_01_11_100_100
// 0b_100010_01_11_100_101
// 0b_100010_01_11_100_110
// 0b_100010_01_11_100_111

// 0b_100010_01_11_101_000
// 0b_100010_01_11_101_001
// 0b_100010_01_11_101_010
// 0b_100010_01_11_101_011
// 0b_100010_01_11_101_100
// 0b_100010_01_11_101_101
// 0b_100010_01_11_101_110
// 0b_100010_01_11_101_111

// 0b_100010_01_11_110_000
// 0b_100010_01_11_110_001
// 0b_100010_01_11_110_010
// 0b_100010_01_11_110_011
// 0b_100010_01_11_110_100
// 0b_100010_01_11_110_101
// 0b_100010_01_11_110_110
// 0b_100010_01_11_110_111

// 0b_100010_01_11_111_000
// 0b_100010_01_11_111_001
// 0b_100010_01_11_111_010
// 0b_100010_01_11_111_011
// 0b_100010_01_11_111_100
// 0b_100010_01_11_111_101
// 0b_100010_01_11_111_110
// 0b_100010_01_11_111_111

////////////////////////////////
// 0b_100010_10_11_010_000
// 0b_100010_10_11_010_001
// 0b_100010_10_11_010_010
// 0b_100010_10_11_010_011
// 0b_100010_10_11_010_100
// 0b_100010_10_11_010_101
// 0b_100010_10_11_010_110
// 0b_100010_10_11_010_111

// 0b_100010_10_11_011_000
// 0b_100010_10_11_011_001
// 0b_100010_10_11_011_010
// 0b_100010_10_11_011_011
// 0b_100010_10_11_011_100
// 0b_100010_10_11_011_101
// 0b_100010_10_11_011_110
// 0b_100010_10_11_011_111

// 0b_100010_10_11_100_000
// 0b_100010_10_11_100_001
// 0b_100010_10_11_100_010
// 0b_100010_10_11_100_011
// 0b_100010_10_11_100_100
// 0b_100010_10_11_100_101
// 0b_100010_10_11_100_110
// 0b_100010_10_11_100_111

// 0b_100010_10_11_101_000
// 0b_100010_10_11_101_001
// 0b_100010_10_11_101_010
// 0b_100010_10_11_101_011
// 0b_100010_10_11_101_100
// 0b_100010_10_11_101_101
// 0b_100010_10_11_101_110
// 0b_100010_10_11_101_111

// 0b_100010_10_11_110_000
// 0b_100010_10_11_110_001
// 0b_100010_10_11_110_010
// 0b_100010_10_11_110_011
// 0b_100010_10_11_110_100
// 0b_100010_10_11_110_101
// 0b_100010_10_11_110_110
// 0b_100010_10_11_110_111

// 0b_100010_10_11_111_000
// 0b_100010_10_11_111_001
// 0b_100010_10_11_111_010
// 0b_100010_10_11_111_011
// 0b_100010_10_11_111_100
// 0b_100010_10_11_111_101
// 0b_100010_10_11_111_110
// 0b_100010_10_11_111_111
// D = 0 = Instruction source is specified in the REG field
// W = 0 = Instruction operate on byte data
